# Importing necessary libraries
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Load Titanic dataset
titanic_df = sns.load_dataset('titanic')

# Data preprocessing
titanic_df.drop(['deck', 'embark_town', 'alive'], axis=1, inplace=True)  # Dropping irrelevant columns
titanic_df.dropna(inplace=True)  # Dropping rows with missing values

# Encoding categorical variables
titanic_df['sex'] = titanic_df['sex'].map({'male': 0, 'female': 1})
titanic_df['embarked'] = titanic_df['embarked'].map({'S': 0, 'C': 1, 'Q': 2})

# Feature selection
X = titanic_df[['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'embarked']]
y = titanic_df['survived']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Model evaluation
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Predictions
# You can use the trained model to predict the likelihood of survival for new passengers.
# For example:
# new_passenger = [[1, 0, 30, 1, 0, 100, 0]]  # Example data for a new passenger
# likelihood_of_survival = model.predict_proba(new_passenger)
